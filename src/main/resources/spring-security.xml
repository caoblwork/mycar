<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!--==========================================================================
	加密用KEY 此处为随机值
	============================================================================-->
	<util:properties id="securityKeyProperties">
    	<prop key="remember-me">SPRING_SECURITY_REMEMBER_ME_KEY</prop>
    	<prop key="anonymous">SPRING_SECURITY_ANONYMOUS_KEY</prop>
	</util:properties>

	<!--==========================================================================
	使用标注拦截业务层方法
	============================================================================-->
	<security:global-method-security pre-post-annotations="enabled" />

	<!--==========================================================================
	SpringSecurity核心过滤器组
	============================================================================-->
	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map request-matcher="ant" >
			<security:filter-chain pattern="/**" filters="
					channelProcessingFilter,
					securityContextPersistenceFilter,
					concurrencyFilter,
					logoutFilter,
					usernamePasswordProcessingFilter,
					basicAuthenticationFilter,
					requestCacheAwareFilter,
					securityContextHolderAwareRequestFilter,
					rememberMeProcessingFilter,
					anonymousProcessingFilter,
					sessionManagementFilter,
					exceptionTranslationFilter,
					filterSecurityInterceptor"
	         />
		</security:filter-chain-map>
	</bean>

	<!-- 
		No.01	=================================================================================================
	 -->
	<bean id="channelProcessingFilter" class="org.springframework.security.web.access.channel.ChannelProcessingFilter">
		<property name="channelDecisionManager" ref="channelDecisionManager" />
		<property name="securityMetadataSource">
			<security:filter-security-metadata-source request-matcher="ant">
				<!--
				<security:intercept-url pattern="/just/test" access="REQUIRES_SECURE_CHANNEL" />
				-->
				<security:intercept-url pattern="/**" access="ANY_CHANNEL" />
			</security:filter-security-metadata-source>
		</property>
	</bean>

	<bean id="channelDecisionManager"
		class="org.springframework.security.web.access.channel.ChannelDecisionManagerImpl">
		<property name="channelProcessors">
			<list>
				<ref local="secureChannelProcessor" />
				<ref local="insecureChannelProcessor" />
			</list>
		</property>
	</bean>

	<bean id="secureChannelProcessor" class="org.springframework.security.web.access.channel.SecureChannelProcessor" />
	<bean id="insecureChannelProcessor" class="org.springframework.security.web.access.channel.InsecureChannelProcessor" />

	<!-- 
		No.02	=================================================================================================
	 -->
	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
		<constructor-arg ref="httpSessionSecurityContextRepository" />
		<property name="forceEagerSessionCreation" value="false" />
	</bean>

	<bean id="httpSessionSecurityContextRepository" class="org.springframework.security.web.context.HttpSessionSecurityContextRepository">
		<property name="allowSessionCreation" value="true" />
		<property name="disableUrlRewriting"  value="false" />
		<property name="springSecurityContextKey" value="SPRING_SECURITY_CONTEXT" />
	</bean>

	<!-- 
		No.03	=================================================================================================
	 -->
	<bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<property name="sessionRegistry" ref="sessionRegistry" />
		<property name="expiredUrl" value="/security/session-expired" />	<!-- 重定向 -->
	</bean>

	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

	<!-- 
		No.04	=================================================================================================
	 -->
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg index="0" value="/security/login" />
		<constructor-arg index="1">
			<array>
				<ref local="logoutHandler" />
				<ref local="rememberMeServices" />
				<ref local="deleteCookieLogoutHandler" />
			</array>
		</constructor-arg>
		<property name="filterProcessesUrl" value="/security/logout"/>
	</bean>

	<bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<property name="invalidateHttpSession" value="true" />
		<property name="clearAuthentication" value="true" />
	</bean>
	
	<bean id="deleteCookieLogoutHandler" class="com.github.yingzhuo.mycar.security.logout.DeleteCookieLogoutHandler">
		<property name="cookieNames">
			<array>
				<value>JSESSIONID</value>
				<value>email</value>
				<value>remember-me</value>
			</array>
		</property>
	</bean>

	<!-- 
		No.05	=================================================================================================
	 -->
	<bean id="usernamePasswordProcessingFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="filterProcessesUrl" value="/security/login-process"/>
		<property name="usernameParameter" value="j_username"/>
		<property name="passwordParameter" value="j_password"/>
		<property name="authenticationManager" ref="customAuthenticationManager"/>
		<property name="rememberMeServices" ref="rememberMeServices"/>
		<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
		<property name="authenticationFailureHandler" ref="authenticationFailureHandler" />
		<property name="sessionAuthenticationStrategy" ref="sas" />
	</bean>
	
	<bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<constructor-arg ref="sessionRegistry" />
		<property name="maximumSessions" value="1" />
	</bean>
	
	<bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="defaultTargetUrl" value="/car/list" />
		<property name="alwaysUseDefaultTargetUrl" value="false" />
	</bean>

	<bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/security/login?error"/>
		<property name="useForward" value="false" />
	</bean>

	<!-- 
		No.06	=================================================================================================
	 -->
	<bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<constructor-arg ref="customAuthenticationManager" />
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>

	<!-- 
		No.07	=================================================================================================
	 -->
	<bean id="requestCacheAwareFilter" class="org.springframework.security.web.savedrequest.RequestCacheAwareFilter">
		<constructor-arg>
			<bean class="org.springframework.security.web.savedrequest.HttpSessionRequestCache" />
		</constructor-arg>
	</bean>

	<!-- 
		No.08	=================================================================================================
	 -->
	<bean id="securityContextHolderAwareRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter">
		<!-- <property name="rolePrefix" value="ROLE_" /> -->
	</bean>

	<!-- 
		No.09	=================================================================================================
	 -->
	<bean id="rememberMeProcessingFilter"
		class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<property name="rememberMeServices" ref="rememberMeServices"/>
		<property name="authenticationManager" ref="customAuthenticationManager" />
	</bean>
	
	<bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
		<property name="userDetailsService" ref="databaseUserDetailsService" />
		<property name="key" value="#{securityKeyProperties['remember-me']}" />
		<property name="tokenRepository" ref="jdbcRememberMeTokenRepository" />
		<property name="cookieName" value="remember-me" />
		<property name="tokenValiditySeconds" value="1209600" />	<!-- two weeks -->
		<property name="parameter" value="remember-me" />
	</bean>

	<bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<property name="key" value="#{securityKeyProperties['remember-me']}" />
	</bean>

	<!--
	<bean id="inMemoryTokenRepository" class="org.springframework.security.web.authentication.rememberme.InMemoryTokenRepositoryImpl" />
	-->
	
	<bean id="jdbcRememberMeTokenRepository" class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 
		No.10	=================================================================================================
	 -->
	<bean id="anonymousProcessingFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<constructor-arg value="#{securityKeyProperties['anonymous']}" />
		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
	</bean>
	
	<bean id="anonymousAuthenticationProvider" class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
		<property name="key" value="#{securityKeyProperties['anonymous']}" />
	</bean>

	<!-- 
		No.11	=================================================================================================
	 -->
	<bean id="sessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter">
		<constructor-arg ref="httpSessionSecurityContextRepository" />
		<constructor-arg ref="sas" />
	</bean>

	<!-- 
		No.12	=================================================================================================
	 -->
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" ref="authenticationEntryPoint" />
		<property name="accessDeniedHandler" ref="accessDeniedHandler" />
	</bean>

	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="useForward" value="false" />
		<property name="loginFormUrl" value="/security/login" />
	</bean>

	<bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
		<property name="errorPage" value="/WEB-INF/jsp/error/403.jsp" />
	</bean>

	<!-- 
		No.13	=================================================================================================
	 -->
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="customAuthenticationManager" />
		<property name="accessDecisionManager" ref="affirmativeBased" />
		<property name="securityMetadataSource">
			<security:filter-security-metadata-source use-expressions="true">
				<security:intercept-url pattern="/" access="permitAll" />
				<security:intercept-url pattern="/security/login" access="permitAll" />
				<security:intercept-url pattern="/user/sign-up" access="permitAll" />
				<security:intercept-url pattern="/css/**" access="permitAll" />
				<security:intercept-url pattern="/swf/**" access="permitAll" />
				<security:intercept-url pattern="/icon/**" access="permitAll" />
				<security:intercept-url pattern="/images/**" access="permitAll" />
				<security:intercept-url pattern="/js-app/**" access="permitAll" />
				<security:intercept-url pattern="/js-lib/**" access="permitAll" />
				<security:intercept-url pattern="/favicon.ico" access="permitAll" />
				<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
				<!--
				<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN') and isFullyAuthenticated()" />
				-->
				<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
			</security:filter-security-metadata-source>
		</property>
	</bean>

	<bean id="customAuthenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<property name="authenticationEventPublisher" ref="defaultAuthEventPublisher"/>
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider"/>
				<ref local="anonymousAuthenticationProvider"/>
				<ref local="rememberMeAuthenticationProvider"/>
			</list>
		</property>
	</bean>

	<bean class="org.springframework.security.access.vote.AffirmativeBased" id="affirmativeBased">
		<property name="decisionVoters">
			<list>
				<ref bean="roleVoter"/>
				<ref bean="expressionVoter"/>
				<ref bean="authenticatedVoter"/>
			</list>
		</property>
	</bean>

	<bean class="org.springframework.security.access.vote.RoleVoter" id="roleVoter" />
	<bean class="org.springframework.security.access.vote.AuthenticatedVoter" id="authenticatedVoter" />

	<bean id="defaultAuthEventPublisher" class="org.springframework.security.authentication.DefaultAuthenticationEventPublisher"/>

	<bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="passwordEncoder" ref="md5PasswordEncoder"/>
		<property name="userDetailsService" ref="databaseUserDetailsService" />
		<!--
		<property name="saltSource" ref="saltSource"/>
		-->
	</bean>

	<bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" id="expressionHandler"/>

	<bean class="org.springframework.security.web.access.expression.WebExpressionVoter" id="expressionVoter">
		<property name="expressionHandler" ref="expressionHandler"/>
	</bean>

	<bean id="md5PasswordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />

	<!--
	<bean class="org.springframework.security.authentication.dao.ReflectionSaltSource" id="saltSource">
		<property name="userPropertyToUse" value="id"/>
	</bean>
	-->
	
	<beans profile="dev">
		<security:debug />
	</beans>

</beans>
